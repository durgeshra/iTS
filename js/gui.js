// Generated by CoffeeScript 1.9.3
var clearAll, cmd, cmd_number, compile, createAlert, create_scope, define_variable, delete_scope, simulate, start_sim, update_variable;

this.resize_list = [];

cmd_number = 0;

cmd = [];

define_variable = function(type, scp, name, val, id) {
  var panel;
  if (id == null) {
    id = scp + "-" + name;
  }
  panel = '<div class="panel panel-success" id="' + id + '" style="display:none;"><div class="panel-heading"> <h3 class="panel-title">' + name + "\t|\t" + type + '</h3></div> <div class="panel-body" id="' + id + '-body">' + val + '</div></div>';
  $('#' + scp + '-body').append(panel);
  return $('#' + id).show(1000);
};

update_variable = function(id, val) {
  var variable;
  variable = $('#' + id + '-body');
  return variable.text(val);
};

create_scope = function(scp, id) {
  var l, panel;
  l = $('.var').length;
  panel = '<div class="panel panel-warning" id="' + id + '" style="display:none;"><div class="panel-heading"> <h3 class="panel-title">' + id + '</h3> </div> <div class="panel-body" id="' + id + '-body"></div></div>';
  $('#' + scp + '-body').append(panel);
  return $('#' + id).show(1000);
};

delete_scope = function(id) {
  return $('#' + id).remove();
};

$('#ace1').ready(function() {
  editor.resize(true);
  editor.setTheme("ace/theme/dawn");
  editor.getSession().setMode("ace/mode/c_cpp");
  editor.setAutoScrollEditorIntoView(true);
  editor.setHighlightActiveLine(true);
  return editor.setShowPrintMargin(false);
});

createAlert = function(name, str, type) {
  var err;
  err = '<div class="alert alert-' + type + ' ' + 'alert-dismissible fade in" role="alert"> <button type="button" class="close" data-dismiss="alert" aria-label="Close"> <span aria-hidden="true">&times;</span></button> <strong>' + name + '\n</strong>' + str + '</div>';
  return $('#sbt-row').after(err);
};

clearAll = function() {
  $('#stdout').val("");
  return $('.alert').alert('close');
};

simulate = function() {
  eval(cmd[cmd_number]);
  cmd_number += 1;
  if (cmd_number === cmd.length) {
    return cmd_number = 0;
  } else {
    return window.setTimeout(simulate, 1000);
  }
};

start_sim = function(obj) {
  cmd_number = 0;
  if (obj.gcc_error) {
    createAlert("GCC ERROR: ", obj.gcc_error, "danger");
  }
  if (obj.gcc_warning) {
    createAlert("GCC Warning: ", obj.gcc_warning, "warning");
  }
  if (obj.gcc_out === obj.its_out) {
    createAlert("", "Simulation made successfully!", "success");
    $('#stdout').val(obj.gcc_out);
    cmd = obj.its_cmd.split("\n");
    console.log(cmd);
    return simulate();
  }
};

compile = function() {
  var code, input;
  clearAll();
  $('#submit-btn').text('Loading...');
  $('#submit-btn').addClass('active');
  code = editor.getValue();
  input = $('#stdin').val();
  code = window.btoa(code);
  input = window.btoa(input);
  $('#sbt_row .btn').button('toggle');
  return $.get("php/compile.php", {
    "code": code,
    "input": input
  }, function(json_text) {
    var obj;
    $('#submit-btn').text('Submit');
    $('#submit-btn').removeClass('active');
    obj = JSON.parse(json_text);
    return start_sim(obj);
  });
};
